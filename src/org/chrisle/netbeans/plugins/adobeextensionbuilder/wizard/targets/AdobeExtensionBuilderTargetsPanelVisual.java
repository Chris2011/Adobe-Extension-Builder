package org.chrisle.netbeans.plugins.adobeextensionbuilder.wizard.targets;

import java.util.*;
import javax.swing.JCheckBox;
import javax.swing.JPanel;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;

/**
 *
 * @author ChrisLE
 */
public class AdobeExtensionBuilderTargetsPanelVisual extends JPanel {

    /**
     * Creates new form AdobeExtensionBuilderTargetsPanel
     */
    public AdobeExtensionBuilderTargetsPanelVisual(AdobeExtensionBuilderTargetsWizardPanel aThis) {
        initComponents();
        
        _checkVect.add(photoshopCheckBox);
        _checkVect.add(illustratorCheckBox);
        _checkVect.add(premiereCheckBox);
        _checkVect.add(preludeCheckBox);
        _checkVect.add(indesignCheckBox);
        _checkVect.add(animateCheckBox);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        illustratorCheckBoxLabel1 = new javax.swing.JLabel();
        animateCheckBox = new javax.swing.JCheckBox();
        photoshopCheckBoxLabel3 = new javax.swing.JLabel();
        photoshopCheckBox = new javax.swing.JCheckBox();
        illustratorCheckBox = new javax.swing.JCheckBox();
        photoshopCheckBoxLabel = new javax.swing.JLabel();
        illustratorCheckBoxLabel = new javax.swing.JLabel();
        premiereCheckBox = new javax.swing.JCheckBox();
        photoshopCheckBoxLabel2 = new javax.swing.JLabel();
        preludeCheckBox = new javax.swing.JCheckBox();
        indesignCheckBox = new javax.swing.JCheckBox();
        photoshopCheckBoxLabel1 = new javax.swing.JLabel();
        checkAll = new javax.swing.JCheckBox();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.jPanel1.border.title"))); // NOI18N

        illustratorCheckBoxLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chrisle/netbeans/plugins/adobeextensionbuilder/resources/id-icon.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(illustratorCheckBoxLabel1, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.illustratorCheckBoxLabel1.text_1")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(animateCheckBox, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.animateCheckBox.text")); // NOI18N

        photoshopCheckBoxLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chrisle/netbeans/plugins/adobeextensionbuilder/resources/an-icon.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(photoshopCheckBoxLabel3, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.photoshopCheckBoxLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(photoshopCheckBox, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.photoshopCheckBox.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(illustratorCheckBox, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.illustratorCheckBox.text")); // NOI18N

        photoshopCheckBoxLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chrisle/netbeans/plugins/adobeextensionbuilder/resources/ps-icon.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(photoshopCheckBoxLabel, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.photoshopCheckBoxLabel.text")); // NOI18N

        illustratorCheckBoxLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chrisle/netbeans/plugins/adobeextensionbuilder/resources/ill-icon.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(illustratorCheckBoxLabel, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.illustratorCheckBoxLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(premiereCheckBox, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.premiereCheckBox.text")); // NOI18N

        photoshopCheckBoxLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chrisle/netbeans/plugins/adobeextensionbuilder/resources/pr-icon.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(photoshopCheckBoxLabel2, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.photoshopCheckBoxLabel2.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(preludeCheckBox, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.preludeCheckBox.text")); // NOI18N
        preludeCheckBox.setMargin(new java.awt.Insets(2, 2, 2, 1));

        org.openide.awt.Mnemonics.setLocalizedText(indesignCheckBox, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.indesignCheckBox.text")); // NOI18N

        photoshopCheckBoxLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/chrisle/netbeans/plugins/adobeextensionbuilder/resources/pl-icon.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(photoshopCheckBoxLabel1, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.photoshopCheckBoxLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(checkAll, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderTargetsPanelVisual.class, "AdobeExtensionBuilderTargetsPanelVisual.checkAll.text")); // NOI18N
        checkAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(checkAll)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(photoshopCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(photoshopCheckBoxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                        .addGap(50, 50, 50)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(indesignCheckBox)
                            .addComponent(preludeCheckBox)
                            .addComponent(animateCheckBox))
                        .addGap(210, 210, 210))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(illustratorCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(premiereCheckBox))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(illustratorCheckBoxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(51, 51, 51))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(photoshopCheckBoxLabel2)
                            .addGap(59, 59, 59)))
                    .addGap(21, 21, 21)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(photoshopCheckBoxLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(27, 27, 27))
                        .addComponent(illustratorCheckBoxLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(photoshopCheckBoxLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(checkAll)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(preludeCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(indesignCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(animateCheckBox)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(photoshopCheckBox))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(photoshopCheckBoxLabel)))
                        .addGap(60, 60, 60))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(illustratorCheckBoxLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(illustratorCheckBox))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(premiereCheckBox)
                                .addComponent(photoshopCheckBoxLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(4, 4, 4))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap(180, Short.MAX_VALUE)
                            .addComponent(photoshopCheckBoxLabel1)
                            .addGap(8, 8, 8)
                            .addComponent(illustratorCheckBoxLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(13, 13, 13)
                            .addComponent(photoshopCheckBoxLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAllActionPerformed
        _checkVect.stream().forEach((jCheckBox) -> {
            jCheckBox.setSelected(checkAll.isSelected());
        });
    }//GEN-LAST:event_checkAllActionPerformed

    private final List<JCheckBox> _checkVect = new ArrayList<>();
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox animateCheckBox;
    private javax.swing.JCheckBox checkAll;
    private javax.swing.JCheckBox illustratorCheckBox;
    private javax.swing.JLabel illustratorCheckBoxLabel;
    private javax.swing.JLabel illustratorCheckBoxLabel1;
    private javax.swing.JCheckBox indesignCheckBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox photoshopCheckBox;
    private javax.swing.JLabel photoshopCheckBoxLabel;
    private javax.swing.JLabel photoshopCheckBoxLabel1;
    private javax.swing.JLabel photoshopCheckBoxLabel2;
    private javax.swing.JLabel photoshopCheckBoxLabel3;
    private javax.swing.JCheckBox preludeCheckBox;
    private javax.swing.JCheckBox premiereCheckBox;
    // End of variables declaration//GEN-END:variables

    boolean valid(WizardDescriptor wizardDescriptor) {

//        if (projectNameTextField.getText().length() == 0) {
//            // TODO if using org.openide.dialogs >= 7.8, can use WizardDescriptor.PROP_ERROR_MESSAGE:
//            wizardDescriptor.putProperty("WizardPanel_errorMessage",
//                    "Project Name is not a valid folder name.");
//            return false; // Display name not specified
//        }
//        File f = FileUtil.normalizeFile(new File(projectLocationTextField.getText()).getAbsoluteFile());
//        if (!f.isDirectory()) {
//            String message = "Project Folder is not a valid path.";
//            wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
//            return false;
//        }
//        final File destFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());
//
//        File projLoc = destFolder;
//        while (projLoc != null && !projLoc.exists()) {
//            projLoc = projLoc.getParentFile();
//        }
//        if (projLoc == null || !projLoc.canWrite()) {
//            wizardDescriptor.putProperty("WizardPanel_errorMessage",
//                    "Project Folder cannot be created.");
//            return false;
//        }
//
//        if (FileUtil.toFileObject(projLoc) == null) {
//            String message = "Project Folder is not a valid path.";
//            wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
//            return false;
//        }
//
//        File[] kids = destFolder.listFiles();
//        if (destFolder.exists() && kids != null && kids.length > 0) {
//            // Folder exists and is not empty
//            wizardDescriptor.putProperty("WizardPanel_errorMessage",
//                    "Project Folder already exists and is not empty.");
//            return false;
//        }
//        wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
        return true;
    }

    void store(WizardDescriptor d) {
//        String name = projectNameTextField.getText().trim();
//        String folder = createdFolderTextField.getText().trim();
//
//        d.putProperty("projdir", new File(folder));
//        d.putProperty("name", name);
    }

    void read(WizardDescriptor settings) {
//        File projectLocation = (File) settings.getProperty("projdir");
//        if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {
//            projectLocation = ProjectChooser.getProjectsFolder();
//        } else {
//            projectLocation = projectLocation.getParentFile();
//        }
//        this.projectLocationTextField.setText(projectLocation.getAbsolutePath());
//
//        String projectName = (String) settings.getProperty("name");
//        if (projectName == null) {
//            projectName = "AdobeExtensionBuilder";
//        }
//        this.projectNameTextField.setText(projectName);
//        this.projectNameTextField.selectAll();
    }

    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }
}
