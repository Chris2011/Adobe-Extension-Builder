package org.chrisle.netbeans.plugins.adobeextensionbuilder.wizard.targets;

import java.util.*;
import javax.swing.*;
import javax.swing.GroupLayout;
import javax.swing.JPanel;
import javax.swing.LayoutStyle;
import org.openide.WizardDescriptor;
import org.openide.WizardValidationException;

/**
 *
 * @author ChrisLE
 */
class AdobeExtensionBuilderTargetsPanel extends JPanel {

    /**
     * Creates new form AdobeExtensionBuilderTargetsPanel
     */
    public AdobeExtensionBuilderTargetsPanel(AdobeExtensionBuilderTargetsWizardPanel aThis) {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - unknown
    private void initComponents() {
        ResourceBundle bundle = ResourceBundle.getBundle("org.chrisle.netbeans.plugins.adobeextensionbuilder.wizard.targets.Bundle");
        photshopCheckBox = new JCheckBox();
        illustratorCheckBox = new JCheckBox();
        photoshopCheckBoxLabel = new JLabel();
        illustratorCheckBoxLabel = new JLabel();
        illustratorCheckBox1 = new JCheckBox();
        photoshopCheckBoxLabel2 = new JLabel();

        //======== this ========

        // JFormDesigner evaluation mark
        setBorder(new javax.swing.border.CompoundBorder(
            new javax.swing.border.TitledBorder(new javax.swing.border.EmptyBorder(0, 0, 0, 0),
                "JFormDesigner Evaluation", javax.swing.border.TitledBorder.CENTER,
                javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Dialog", java.awt.Font.BOLD, 12),
                java.awt.Color.red), getBorder())); addPropertyChangeListener(new java.beans.PropertyChangeListener(){public void propertyChange(java.beans.PropertyChangeEvent e){if("border".equals(e.getPropertyName()))throw new RuntimeException();}});


        //---- photshopCheckBox ----
        photshopCheckBox.setText(bundle.getString("AdobeExtensionBuilderTargetsPanel.photshopCheckBox.text"));

        //---- illustratorCheckBox ----
        illustratorCheckBox.setText(bundle.getString("AdobeExtensionBuilderTargetsPanel.illustratorCheckBox.text"));

        //---- photoshopCheckBoxLabel ----
        photoshopCheckBoxLabel.setIcon(new ImageIcon(getClass().getResource("/org/chrisle/netbeans/plugins/adobeextensionbuilder/resources/ps-icon.png")));
        photoshopCheckBoxLabel.setText(bundle.getString("AdobeExtensionBuilderTargetsPanel.photoshopCheckBoxLabel.text"));

        //---- illustratorCheckBoxLabel ----
        illustratorCheckBoxLabel.setIcon(new ImageIcon(getClass().getResource("/org/chrisle/netbeans/plugins/adobeextensionbuilder/resources/ill-icon.png")));
        illustratorCheckBoxLabel.setText(bundle.getString("AdobeExtensionBuilderTargetsPanel.illustratorCheckBoxLabel.text"));

        //---- illustratorCheckBox1 ----
        illustratorCheckBox1.setText(bundle.getString("AdobeExtensionBuilderTargetsPanel.illustratorCheckBox1.text"));

        //---- photoshopCheckBoxLabel2 ----
        photoshopCheckBoxLabel2.setIcon(new ImageIcon(getClass().getResource("/org/chrisle/netbeans/plugins/adobeextensionbuilder/resources/pr-icon.png")));
        photoshopCheckBoxLabel2.setText(bundle.getString("AdobeExtensionBuilderTargetsPanel.photoshopCheckBoxLabel2.text"));

        GroupLayout layout = new GroupLayout(this);
        setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup()
                .addGroup(layout.createSequentialGroup()
                    .addGap(32, 32, 32)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addComponent(photshopCheckBox, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(illustratorCheckBox, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(illustratorCheckBox1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createParallelGroup()
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addComponent(illustratorCheckBoxLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(photoshopCheckBoxLabel, GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                            .addGap(223, 223, 223))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(0, 0, 0)
                            .addComponent(photoshopCheckBoxLabel2)
                            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup()
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup()
                        .addGroup(layout.createSequentialGroup()
                            .addGap(88, 88, 88)
                            .addComponent(photoshopCheckBoxLabel, GroupLayout.DEFAULT_SIZE, 17, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(photshopCheckBox)))
                    .addGap(7, 7, 7)
                    .addGroup(layout.createParallelGroup()
                        .addComponent(illustratorCheckBoxLabel, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE)
                        .addComponent(illustratorCheckBox))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                        .addComponent(illustratorCheckBox1)
                        .addComponent(photoshopCheckBoxLabel2, GroupLayout.PREFERRED_SIZE, 16, GroupLayout.PREFERRED_SIZE))
                    .addGap(143, 143, 143))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - unknown
    private JCheckBox photshopCheckBox;
    private JCheckBox illustratorCheckBox;
    private JLabel photoshopCheckBoxLabel;
    private JLabel illustratorCheckBoxLabel;
    private JCheckBox illustratorCheckBox1;
    private JLabel photoshopCheckBoxLabel2;
    // End of variables declaration//GEN-END:variables

    boolean valid(WizardDescriptor wizardDescriptor) {

//        if (projectNameTextField.getText().length() == 0) {
//            // TODO if using org.openide.dialogs >= 7.8, can use WizardDescriptor.PROP_ERROR_MESSAGE:
//            wizardDescriptor.putProperty("WizardPanel_errorMessage",
//                    "Project Name is not a valid folder name.");
//            return false; // Display name not specified
//        }
//        File f = FileUtil.normalizeFile(new File(projectLocationTextField.getText()).getAbsoluteFile());
//        if (!f.isDirectory()) {
//            String message = "Project Folder is not a valid path.";
//            wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
//            return false;
//        }
//        final File destFolder = FileUtil.normalizeFile(new File(createdFolderTextField.getText()).getAbsoluteFile());
//
//        File projLoc = destFolder;
//        while (projLoc != null && !projLoc.exists()) {
//            projLoc = projLoc.getParentFile();
//        }
//        if (projLoc == null || !projLoc.canWrite()) {
//            wizardDescriptor.putProperty("WizardPanel_errorMessage",
//                    "Project Folder cannot be created.");
//            return false;
//        }
//
//        if (FileUtil.toFileObject(projLoc) == null) {
//            String message = "Project Folder is not a valid path.";
//            wizardDescriptor.putProperty("WizardPanel_errorMessage", message);
//            return false;
//        }
//
//        File[] kids = destFolder.listFiles();
//        if (destFolder.exists() && kids != null && kids.length > 0) {
//            // Folder exists and is not empty
//            wizardDescriptor.putProperty("WizardPanel_errorMessage",
//                    "Project Folder already exists and is not empty.");
//            return false;
//        }
//        wizardDescriptor.putProperty("WizardPanel_errorMessage", "");
        return true;
    }

    void store(WizardDescriptor d) {
//        String name = projectNameTextField.getText().trim();
//        String folder = createdFolderTextField.getText().trim();
//
//        d.putProperty("projdir", new File(folder));
//        d.putProperty("name", name);
    }

    void read(WizardDescriptor settings) {
//        File projectLocation = (File) settings.getProperty("projdir");
//        if (projectLocation == null || projectLocation.getParentFile() == null || !projectLocation.getParentFile().isDirectory()) {
//            projectLocation = ProjectChooser.getProjectsFolder();
//        } else {
//            projectLocation = projectLocation.getParentFile();
//        }
//        this.projectLocationTextField.setText(projectLocation.getAbsolutePath());
//
//        String projectName = (String) settings.getProperty("name");
//        if (projectName == null) {
//            projectName = "AdobeExtensionBuilder";
//        }
//        this.projectNameTextField.setText(projectName);
//        this.projectNameTextField.selectAll();
    }

    void validate(WizardDescriptor d) throws WizardValidationException {
        // nothing to validate
    }
}
