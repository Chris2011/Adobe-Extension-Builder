/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.chrisle.netbeans.plugins.adobeextensionbuilder.option;

final class AdobeExtensionBuilderOptionPanel extends javax.swing.JPanel {

    private final AdobeExtensionBuilderOptionOptionsPanelController controller;

    AdobeExtensionBuilderOptionPanel(AdobeExtensionBuilderOptionOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _zxpPathLabel = new javax.swing.JLabel();
        _zxpPath = new javax.swing.JTextField();
        _browseToZxpFolder = new javax.swing.JButton();
        _certLabel = new javax.swing.JLabel();
        _certPath = new javax.swing.JTextField();
        _browseToCertFolder = new javax.swing.JButton();
        _createCert = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(_zxpPathLabel, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderOptionPanel.class, "AdobeExtensionBuilderOptionPanel._zxpPathLabel.text")); // NOI18N

        _zxpPath.setText(org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderOptionPanel.class, "AdobeExtensionBuilderOptionPanel._zxpPath.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(_browseToZxpFolder, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderOptionPanel.class, "AdobeExtensionBuilderOptionPanel._browseToZxpFolder.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(_certLabel, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderOptionPanel.class, "AdobeExtensionBuilderOptionPanel._certLabel.text")); // NOI18N

        _certPath.setText(org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderOptionPanel.class, "AdobeExtensionBuilderOptionPanel._certPath.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(_browseToCertFolder, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderOptionPanel.class, "AdobeExtensionBuilderOptionPanel._browseToCertFolder.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(_createCert, org.openide.util.NbBundle.getMessage(AdobeExtensionBuilderOptionPanel.class, "AdobeExtensionBuilderOptionPanel._createCert.text")); // NOI18N
        _createCert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                _createCertActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(_zxpPathLabel)
                    .addComponent(_certLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(_certPath, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .addComponent(_zxpPath, javax.swing.GroupLayout.Alignment.LEADING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(_browseToZxpFolder)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(_browseToCertFolder)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(_createCert)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(_zxpPathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_zxpPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_browseToZxpFolder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(_certLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_certPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(_browseToCertFolder)
                    .addComponent(_createCert))
                .addContainerGap(178, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void _createCertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event__createCertActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event__createCertActionPerformed

    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(AdobeExtensionBuilderOptionPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(AdobeExtensionBuilderOptionPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(AdobeExtensionBuilderOptionPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(AdobeExtensionBuilderOptionPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton _browseToCertFolder;
    private javax.swing.JButton _browseToZxpFolder;
    private javax.swing.JLabel _certLabel;
    private javax.swing.JTextField _certPath;
    private javax.swing.JButton _createCert;
    private javax.swing.JTextField _zxpPath;
    private javax.swing.JLabel _zxpPathLabel;
    // End of variables declaration//GEN-END:variables
}
